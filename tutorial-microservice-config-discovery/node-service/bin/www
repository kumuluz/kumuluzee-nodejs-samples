#!/usr/bin/env node
/* eslint-disable no-unreachable */

const app = require("../app/app.js");
const http = require("http");
const KumuluzeeService = require("../app/services/kumuluzee.service");

const normalizePort = (val) => {
    const port = parseInt(val, 10);
    if (isNaN(port)) {
        return val;
    }
    if (port >= 0) {
        return port;
    }
    return false;
};

const onError = (error) => {
    if (error.syscall !== "listen") {
        throw error;
    }
    const bind = typeof port === "string" ? `Pipe ${port}` : `Port ${port}`;
    switch (error.code) {
        case "EACCES":
            console.error(`${bind} requires elevated privileges!`);
            process.exit(1);
            break;
        case "EADDRINUSE":
            console.error(`${bind} is already in use!`);
            process.exit(1);
            break;
        default:
            throw error;
    }
};

const onListening = () => {
    const addr = server.address();
    const bind = typeof port === "string" ? `Pipe ${addr}` : `Port ${addr.port}`;
    console.log(`Listening on ${bind}`);

    KumuluzeeService.registerService();
};

const port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

const server = http.createServer(app);

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);
